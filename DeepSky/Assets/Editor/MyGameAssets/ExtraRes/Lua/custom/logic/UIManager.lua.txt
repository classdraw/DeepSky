local UIManager = BaseClass("UIManager",Singleton)


function UIManager:ctor()

end

function UIManager:Init()
    self.m_kUIs={};
    self.m_kUIRootHandle=GameResourceManager.GetInstance():LoadResourceSync("UI_CanvasRoot");
    self.m_kUICanvasObj=self.m_kUIRootHandle:GetGameObject();
    GameUtils.SetGameObjectDontDestroy(self.m_kUICanvasObj);
    self.m_kRoot=self.m_kUICanvasObj.transform:Find("Canvas/UIRoot"):GetComponent("UIRoot");

    local cacheRoot=self.m_kUICanvasObj.transform:Find("Canvas/Cache");
    ---@type UICache
    self.m_kUICache=require("coreui.UICache").New(cacheRoot);

    local overlayCanvas=self.m_kUICanvasObj.transform:Find("Canvas"):GetComponent("Canvas");
    SystemUtils.SetUIConfig(overlayCanvas);

    self.m_OpenUIs={};--所有打开的ui键值对
    self:_startBind();
end

function UIManager:Release()
    self:_stopBind();


    if self.m_kUIRootHandle~=nil then
        self.m_kUIRootHandle:Dispose();
    end
    self.m_kUIRootHandle=nil;
    self.m_kUICanvasObj=nil;
    self.m_kRoot=nil;
    if self.m_kUICache~=nil then
        self.m_kUICache:Delete();
    end
    self.m_kUICache=nil;

    --ui清除
    
end

--uiData为UIConfig的UIConfigData table数据
function UIManager:Open(uiData,param,layer)--layer==UIHierarchy
    --没有数据return
    if uiData==nil then
        return false;
    end
    ---@type UIBaseCtrl
    local ctrl=self.m_OpenUIs[uiData.uiName];
    if ctrl~=nil then
        ctrl:UpdateWindow(param);
        return;
    end

    ctrl=self.m_kUICache:GetCtrl(uiData.path.."Ctrl");
    if ctrl~=nil then
        ctrl:Build(uiData);
    end

    if layer==nil then
        layer=0;
    end
    local dlayer=self.m_kRoot:GetUIHierarchyLayerLua(layer);
    local viewUIObj=ctrl:GetObj();
    if viewUIObj~=nil then
        dlayer:AddChild(viewUIObj);
    end
    

    ctrl:OpenWindow(param);
    self.m_OpenUIs[uiData.uiName]=ctrl;
end

function UIManager:Close(uiData)
    if uiData==nil then
        return false;
    end
    local ctrl=self.m_OpenUIs[uiData.uiName];
    if ctrl~=nil then
        ctrl:CloseWindow();
        --需要丢入cache 等待回收
        self.m_kUICache:AddUI(ctrl);--鸟方法细节还没写好 还没测试 先放着
        self.m_OpenUIs[uiData.uiName]=nil;
    end
end


function UIManager:_startBind()
    local context = LoxoContext.GetApplicationContext();
    local container = context:GetContainer();

    --初始化Lua的数据绑定服务，一般建议在游戏的C#启动脚本创建
	self.m_Bundle = LuaBindingServiceBundle(container)
	self.m_Bundle:Start();
end


function UIManager:_stopBind()
    if self.m_Bundle~=nil then
        self.m_Bundle:Stop();
    end
    self.m_Bundle=nil;
end

return UIManager;